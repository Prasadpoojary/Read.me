#pragma checksum "C:\Users\User\Desktop\Fri&Sis\SisProjects\Sent\senfsdf\ReadME\Views\User\PDFReader.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a78f40051394533310d7f3862ab9fdd2696f8166"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_User_PDFReader), @"mvc.1.0.view", @"/Views/User/PDFReader.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\User\Desktop\Fri&Sis\SisProjects\Sent\senfsdf\ReadME\Views\_ViewImports.cshtml"
using ReadME;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a78f40051394533310d7f3862ab9fdd2696f8166", @"/Views/User/PDFReader.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"669956f466e7ffdd3292ae75daf33bf9bfbe94e4", @"/Views/_ViewImports.cshtml")]
    public class Views_User_PDFReader : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\User\Desktop\Fri&Sis\SisProjects\Sent\senfsdf\ReadME\Views\User\PDFReader.cshtml"
  
    Layout = "./../Shared/" + ViewBag.layoutName;

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<section class=""container"">
    <div class=""top-bar"">
        <button class=""btn"" id=""prev-page"">
            <i class=""fas fa-arrow-circle-left""></i> Prev Page
        </button>
        <span class=""page-info"">
            Page <span id=""page-num""></span> of <span id=""page-count""></span>
        </span>
        <button class=""btn"" id=""next-page"">
            Next Page <i class=""fas fa-arrow-circle-right""></i>
        </button>

    </div>
    <input type=""hidden""");
            BeginWriteAttribute("name", "\r\n           name=\"", 545, "\"", 564, 0);
            EndWriteAttribute();
            WriteLiteral("\r\n           id=\"PDFURL\"");
            BeginWriteAttribute("value", "\r\n           value=\"", 589, "\"", 630, 2);
            WriteAttributeValue("", 609, "/", 609, 1, true);
#nullable restore
#line 23 "C:\Users\User\Desktop\Fri&Sis\SisProjects\Sent\senfsdf\ReadME\Views\User\PDFReader.cshtml"
WriteAttributeValue("", 610, ViewBag.bookPDFPath, 610, 20, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" />
    <canvas id=""pdf-render""></canvas>
   
    <script>
       
        var url = document.querySelector(""#PDFURL"").value;
        url = ""https://localhost:5001"" + url;
        
        document.addEventListener(""contextmenu"", function (e) {
            e.preventDefault();
        }, false);

        
        let pdfDoc = null,
            pageNum = 1,
            pageIsRendering = false,
            pageNumIsPending = null;

        const scale = 1.5,
            canvas = document.querySelector(""#pdf-render""),
            ctx = canvas.getContext(""2d"");

        // Render the page
        const renderPage = (num) => {
            pageIsRendering = true;

            // Get page
            pdfDoc.getPage(num).then((page) => {
                // Set scale
                const viewport = page.getViewport({ scale });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                const renderCtx = {
                    canvasC");
            WriteLiteral(@"ontext: ctx,
                    viewport,
                };

                page.render(renderCtx).promise.then(() => {
                    pageIsRendering = false;

                    if (pageNumIsPending !== null) {
                        renderPage(pageNumIsPending);
                        pageNumIsPending = null;
                    }
                });

                // Output current page
                document.querySelector(""#page-num"").textContent = num;
            });
        };

        // Check for pages rendering
        const queueRenderPage = (num) => {
            if (pageIsRendering) {
                pageNumIsPending = num;
            } else {
                renderPage(num);
            }
        };

        // Show Prev Page
        const showPrevPage = () => {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        };

        // Show Next Page
        const ");
            WriteLiteral(@"showNextPage = () => {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        };

        // Get Document
        pdfjsLib
            .getDocument(url)
            .promise.then((pdfDoc_) => {
                pdfDoc = pdfDoc_;

                document.querySelector(""#page-count"").textContent = pdfDoc.numPages;

                renderPage(pageNum);
            })
            .catch((err) => {
                // Display error
                const div = document.createElement(""div"");
                div.className = ""error"";
                div.appendChild(document.createTextNode(err.message));
                document.querySelector(""body"").insertBefore(div, canvas);
                // Remove top bar
                document.querySelector("".top-bar"").style.display = ""none"";
            });

        // Button Events
        document
            .querySelector(""#prev-page"")
           ");
            WriteLiteral(" .addEventListener(\"click\", showPrevPage);\r\n        document\r\n            .querySelector(\"#next-page\")\r\n            .addEventListener(\"click\", showNextPage);\r\n    </script>\r\n</section>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
